# Step 1: Read the dataset
import pandas as pd

# Replace 'your_dataset.csv' with the actual file path or URL of your dataset
df = pd.read_csv('your_dataset.csv')

# Explore the dataset to understand its structure
print(df.head())

# Step 2: Distinguish the feature and target set
# Assuming 'Exited' is the target variable indicating whether a customer will leave in the next 6 months
X = df.drop('Exited', axis=1)  # Features
y = df['Exited']  # Target variable

# Step 3: Divide the dataset into training and test sets
from sklearn.model_selection import train_test_split

# Split the data into 80% training and 20% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Normalize the train and test data
from sklearn.preprocessing import StandardScaler

# Initialize the StandardScaler
scaler = StandardScaler()

# Fit and transform the scaler on the training data
X_train_normalized = scaler.fit_transform(X_train)

# Transform the test data using the same scaler
X_test_normalized = scaler.transform(X_test)

# Step 5: Initialize and build the model
from tensorflow import keras
from tensorflow.keras import layers

# Initialize a simple neural network model
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(32, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Sigmoid activation for binary classification
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Fit the model on the normalized training data
model.fit(X_train_normalized, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluate the model on the test data
test_loss, test_acc = model.evaluate(X_test_normalized, y_test)
print(f"Test Accuracy: {test_acc}")

# Generate predictions on the test set
y_pred = (model.predict(X_test_normalized) > 0.5).astype("int32")

# Print the confusion matrix and accuracy score
from sklearn.metrics import confusion_matrix, accuracy_score

conf_matrix = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Confusion Matrix:")
print(conf_matrix)
print(f"Accuracy Score: {accuracy}")
